class Solution {
    vector<int>vis;
    vector<int>sz;
    int n;
    void dfs(vector<vector<int>>&m,int node,int cnts){
        vis[node]=1;
        sz[node]=cnts;
        for(int i=0;i<n;i++){
            if(m[node][i] and vis[i]==0){
                dfs(m,i,cnts);
            }
        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n=graph.size();
        vis.resize(n);
        sz.resize(n,-1);
        sort(initial.begin(),initial.end());
        vector<int>oks(initial);
        for(int i=0;i<initial.size();i++){
            if(vis[initial[i]]==0){
                dfs(graph,initial[i],initial[i]);
            }
            oks[i]=sz[initial[i]];
        }
        int ans=-1;
        vector<vector<pair<int,int>>>m(2);
        for(int i=0;i<n;i++){
            if(sz[i]==-1)
                continue;
            int cnts=count(sz.begin(),sz.end(),sz[i]);
            int cn=count(oks.begin(),oks.end(),sz[i]);
            if(cn==1)
            m[0].push_back({sz[i],cnts});
            else
            m[1].push_back({sz[i],cnts});
        }
        if(m[0].empty()==false){
            return res(m[0]);
        }
        return res(m[1],2);
    }
    int res(vector<pair<int,int>>&a,int cnt=1){
        int res=0;
        for(int i=1;i<a.size();i++){
            // cout<<a[i].first<<" "<<a[i].second<<endl;;
            if(cnt==2){
                if(a[res].first>a[i].first){
                    res=i;
                }
                continue;
            }
            if(a[res].second<a[i].second){
                res=i;
            }
            else if(a[res].second==a[i].second and a[res].first>a[i].first){
                res=i;
            }
        }
        // cout<<endl;
        return a[res].first;
    }
};